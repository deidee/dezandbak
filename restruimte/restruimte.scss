
$container-width: 1000px;
$gutter: 24px;

* {
  border: 0;
  box-sizing: border-box;
  font-family: inherit;
  font-size: 1em;
  margin: 0;
  outline: 0;
  padding: 0;
  position: relative;
}

html {
  font: normal 100%/1.5 Calibri, sans-serif, serif;
}

.container {
  background: transparentize(lime, .25);
  margin-left: auto;
  margin-right: auto;
  max-width: $container-width;
  padding-left: $gutter / 2;
  padding-right: $gutter / 2;
  width: 100%;
}

.container-fluid {
  background: transparentize(green, .25);
  margin-left: auto;
  margin-right: auto;
  padding-left: $gutter / 2;
  padding-right: $gutter / 2;
  width: 100%;
}

.rest {
  $width: calc((100vw - #{$container-width}) / 2);
  background: transparentize(yellow, .5);
  display: none; // Hide by default.
  outline: 1px dotted transparentize(red, .5);
  //padding-left: $gutter / 2;
  //padding-right: $gutter / 2;

  // It only makes sense to calculate a rest width when the viewport width > container width.
  @media (min-width: $container-width ) {
    display: block;
    flex: 0 0 $width;
    max-width: $width;
    min-height: 1px;
    overflow: hidden;
  }
}

.row {
  display: flex;
  flex-wrap: wrap;
  margin-left: $gutter / -2;
  margin-right: $gutter / -2;
}

%col {
  min-height: 1px; // Prevent columns from collapsing when empty.
  outline: 1px dotted transparentize(red, .5);
  padding-right: ($gutter / 2);
  padding-left: ($gutter / 2);
  position: relative;
  width: 100%;
}

[class|="col"],
[class*=" col-"] {
  @extend %col;
}

.col {
  @extend %col;
  flex-basis: 0;
  flex-grow: 1;
  max-width: 100%;
}

@for $column from 1 through 12 {
  $p: percentage(1 / 12 * $column);

  .col-#{$column} {
    flex: 0 0 $p;
    max-width: $p;
  }
}

@media (min-width: $container-width) {
  @for $column from 1 through 12 {
    $width: $container-width / 12 * $column;

    .col-lg-#{$column} {
      flex: 0 0 $width;
      max-width: $width;
    }
  }
}

